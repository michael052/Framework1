<?php
class Cache_Class{

private static $_instance;

private function __construct(){} # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
private function __clone(){} # –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

public static function instance () {
    if(!isset(self::$_instance))
        self::$_instance = new self();
    return self::$_instance;
}

public function set($id, $data, $lifetime = 3600){ # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ª—å–∫–æ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è
#$id - –&#65533;–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–µ—à–∞, $data - –¥–∞–Ω–Ω—ã–µ, $lifetime - –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞

$cacheFile = $this->cacheFullName($id); # –ø–æ id –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
file_put_contents($cacheFile, serialize($data)); # –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª
touch($cacheFile, (time() + intval($lifetime))); # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ + –∏–Ω—Ç–µ—Ä–≤–∞–ª

if(!is_file(CACHE_ROOT.DS.'cache_clean')){ # –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    file_put_contents(CACHE_ROOT.DS.'cache_clean', ''); # —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
    touch(CACHE_ROOT.DS.'cache_clean' ,
    (time() + intval(Config::instance()->get('cache_lifetime'))));  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
}
}

public function get($id){ # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ

if(is_file(CACHE_ROOT.DS.'cache_clean') # –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–µ–Ω–µ–Ω–∏—è –º–µ–Ω—å—à–µ —á–µ–º —Ç–µ–∫—É—â–µ–µ
    AND filemtime(CACHE_ROOT.DS.'cache_clean') < time())
{
    $this->clean(); # –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—á–∏—â–µ–Ω–∏–µ
}

$cacheFile = $this->cacheFullName($id); # –ø–æ id –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
if (file_exists($cacheFile)){ # –ø—Ä–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
    if(filemtime($cacheFile) < time()) # –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        $this->delete($id); # —É–¥–∞–ª—è–µ–º –∫—ç—à —Ñ–∞–π–ª –ø–æ id
    else # –∏–Ω–∞—á–µ
        return unserialize(file_get_contents($cacheFile));
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º PHP-–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        //–≤ –≤–∏–¥–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
}
return false; # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç
}

public function delete($id){ # —É–¥–∞–ª–µ–Ω–∏–µ –∫–µ—à–∞
$cacheFile = $this->cacheFullName($id); # –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ id
unlink($cacheFile); # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
}

private function cacheFullName($id) { # –∏–º—è –∫—ç—à —Ñ–∞–π–ª–∞
    return CACHE_ROOT.DS.rawurlencode($id).'.cache';
}

public function clean() { # –æ—á–∏—â–µ–Ω–∏–µ –∫—ç—à–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞ 5
$files = scandir(CACHE_ROOT);
// –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ü–∏–∫–ª–µ
foreach ($files as $file){
// –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
if (($file !== '.' ) AND ($file !== '..'))
    unlink(CACHE_ROOT.DS.$file);
}

}
}